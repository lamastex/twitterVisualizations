[{"/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/index.js":"1","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/App.js":"2","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/helpers/treeHelpers.js":"3","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/components/Tree.js":"4","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/components/header/Header.js":"5","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/components/Graph2.js":"6"},{"size":179,"mtime":1630673342645,"results":"7","hashOfConfig":"8"},{"size":769,"mtime":1634146729065,"results":"9","hashOfConfig":"8"},{"size":1030,"mtime":1630673342645,"results":"10","hashOfConfig":"8"},{"size":8355,"mtime":1630673342640,"results":"11","hashOfConfig":"8"},{"size":877,"mtime":1630673709062,"results":"12","hashOfConfig":"8"},{"size":6685,"mtime":1630673342640,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"oqj9d6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/index.js",[],["31","32"],"/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/App.js",[],"/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/helpers/treeHelpers.js",["33"],"import * as d3 from 'd3'\n\n/*\nCreate accessors that specify data from the csv-file\n*/\nexport const x = (d) => d.NrOfRetweets;\nexport const y = (d) => d.NrOfRetweeters;\nexport const radius = (d) => d.followersCount;\nexport const color = (d) => d.followersCount;\nexport const name = (d) => d.ScreenName;\nexport const id = (d) => d.UserId;\n\n// Returns the largest x-value in the data.\nexport const getMaxX = (data) => Math.max(...data.map((d) => x(d)));\n\n//Returns the largest y-value in the data.\nexport const getMaxY = (data) => Math.max(...data.map((d) => y(d)));\n\n//Returns the largest radius in the data.\nexport const getMaxRadius = (data) => Math.max(...data.map((d) => radius(d)));\n\n//Returns the \"largest\" color in the data.\nexport const getMaxColor = (data) => {\n  var maxColor = Math.max(...data.map((d) => color(d)));\n  var cutOff = 10000;\n\n  if (maxColor > cutOff) return cutOff;\n  return maxColor;\n};\n\n\n//Order so that largest circle gets placed deepest.\nexport const orderLargestBelow = (a, b) => radius(b) - radius(a)\n\n","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/components/Tree.js",["34","35","36","37","38","39","40"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../data/dummy_tree.json\";\n\nimport {\n  getMaxX,\n  getMaxY,\n  getMaxRadius,\n  getMaxColor,\n  orderLargestBelow,\n  x,\n  y,\n  radius,\n  color,\n  name,\n  id,\n} from \"../helpers/treeHelpers\";\n\n/*\nSpecify circle constants\n*/\nvar circleMaxRadius = 8;\nvar circleMinRadius = 3;\nvar circleEnlargeConstant = 2;\nvar circleIdleOpacity = 0.2;\nvar circleActiveOpacity = 1;\nvar circleClickedStrokeWidth = 4;\n\n/*\nCreate our user of interest\n*/\nvar userOfInterest = {\n  UserID: \"123456789\", // Add the user of interest if wanted\n};\n\n/*\nCreate id-functions\n*/\nconst getCircleId = (d) => \"circ\" + id(d);\nconst getTextId = (d) => \"text\" + id(d);\n\n//\nvar radiusScale;\nvar colorScale;\n\n//\nvar xScale;\nvar yScale;\n\nfunction Tree() {\n  const [tweetId, setTweetId] = useState(null);\n  const d3Tree = useRef();\n\n  useEffect(() => {\n    const margin = { top: 50, right: 30, bottom: 30, left: 30 };\n    const width =\n      parseInt(d3.select(\"#tree\").style(\"width\")) - margin.left - margin.right;\n    const height =\n      parseInt(d3.select(\"#tree\").style(\"height\")) - margin.top - margin.bottom;\n    //d3.selectAll(\"svg > *\").remove();\n    const svg = d3\n      .select(d3Tree.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    /*\nCreate title\n*/\n    var title = g\n      .append(\"text\")\n      .attr(\"class\", \"title\") // style in css\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 0)\n      .text(\"Twitter network in 01_tree.json\");\n\n    xScale = d3\n      .scaleLog()\n      .range([0, width])\n      .domain([1, getMaxX(data)]);\n    var xAxis = d3.axisBottom(xScale).ticks(5, d3.format(\",d\"));\n    var gXAxis = g\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(\" + 0 + \",\" + height + \")\")\n      .call(xAxis);\n\n    // Create x-axis label.\n    var xAxisLabel = g\n      .append(\"text\")\n      .attr(\"class\", \"x label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", width)\n      .attr(\"y\", height - 6)\n      .text(\"Number of retweets\");\n    //\n\n    yScale = d3\n      .scaleLinear()\n      .range([height, 0])\n      .domain([0, getMaxY(data)]);\n    var yAxis = d3.axisLeft(yScale);\n    var gYAxis = g.append(\"g\").attr(\"class\", \"y axis\").call(yAxis);\n\n    // Create y-axis label\n    var yAxisLabel = g\n      .append(\"text\")\n      .attr(\"class\", \"y label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".75em\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"Number of unique retweeters\");\n\n    /*\n  Create scale for radius\n  */\n    radiusScale = d3\n      .scaleLog()\n      .base(10)\n      .range([circleMinRadius, circleMaxRadius])\n      .domain([1, getMaxRadius(data)]);\n\n    /*\n  Create scale for color\n  */\n    colorScale = d3\n      .scaleLinear()\n      .range([\"blue\", \"red\"])\n      .domain([1, getMaxColor(data)]);\n\n    // Enter the data\n    var nodes = g\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cursor\", \"grab\")\n      .attr(\"class\", \"nodeCircle\")\n      .attr(\"data-id\", id)\n      .attr(\"id\", getCircleId)\n      .attr(\"opacity\", circleIdleOpacity)\n      .attr(\"fill\", (d) => colorScale(color(d)))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0)\n      .attr(\"r\", (d) => radiusScale(radius(d)))\n      .attr(\"cx\", (d) => xScale(x(d)))\n      .attr(\"cy\", (d) => yScale(y(d)))\n      .on(\"mouseover\", function (event, d) {\n        d3.select(event.target)\n          .attr(\"r\", 10 * circleEnlargeConstant)\n          .attr(\"opacity\", circleActiveOpacity);\n\n        console.log(d);\n        console.log(event.target);\n        console.log(this);\n\n    \n      })\n      .on(\"mouseout\", mouseoutCircle)\n      .on(\"click\", clickCircle)\n      .sort(orderLargestBelow);\n\n    svg.call(\n      d3\n        .zoom()\n\n        .scaleExtent([0.5, Infinity])\n        .on(\"zoom\", (event, d) => {\n          {\n            // Create new x- and y-scale\n            var new_xScale = event.transform.rescaleX(xScale);\n            var new_yScale = event.transform.rescaleY(yScale);\n\n            // Display new axes\n            gXAxis.call(xAxis.scale(new_xScale));\n            gYAxis.call(yAxis.scale(new_yScale));\n\n            // Reposition circles\n            d3.selectAll(\".nodeCircle\")\n              .attr(\"cx\", function (d) {\n                return new_xScale(x(d));\n              })\n              .attr(\"cy\", function (d) {\n                return new_yScale(y(d));\n              });\n\n\n            // Reposition texts\n            d3.selectAll(\".nodeText\")\n              .attr(\"x\", function (d) {\n                return new_xScale(x(d));\n              })\n              .attr(\"y\", function (d) {\n                return new_yScale(y(d));\n              });\n          }\n        })\n    );\n\n    // Create tooltip that shows username\n    nodes.append(\"text\").call(setTextAttributes);\n\n    // Set appearance for user of interest\n    d3.select(\"#\" + getCircleId(userOfInterest)).attr(\"fill\", \"orange\");\n\n    g.exit().remove();\n  }, []);\n\n\n\n  //Set attributes for tooltip (showing screen name) text.\n  const setTextAttributes = (text) => {\n    text\n      .attr(\"class\", \"hidden nodeText\") // Set class to hidden upon creation\n      .attr(\"data-id\", id)\n      .attr(\"id\", getTextId)\n      .attr(\"x\", (d) => xScale(x(d)))\n      .attr(\"y\", (d) => yScale(y(d)))\n      .attr(\"dy\", (d) => -(circleMaxRadius * circleEnlargeConstant * 1.5))\n      .attr(\"text-anchor\", \"beginning\")\n      .text((d) => name(d));\n  };\n\n  //Handle mouse hover on circle. Display circle's screen name.\n  const mouseoverCircle = (event, d) => {\n    var theCircle = d3\n      .select(this)\n      .attr(\"fill\", \"orange\")\n      .attr(\"r\", 10 * circleEnlargeConstant);\n\n  };\n\n  //Handle zoom. Zoom both x-axis and y-axis.\n\n  function mouseoutCircle(event, d) {\n    d3.select(event.target)\n      .attr(\"r\", 10 / circleEnlargeConstant)\n      .attr(\"opacity\", circleActiveOpacity);\n \n  }\n\n  /**\n   * Handle click on zoomable area. That is, handle click outside a node which\n   * is considered a deselecting click => deselect previously clicked node\n   * and remove displayed tweets.\n   */\n  const clickView = () => {\n    // Remove clicked status on clicked nodes\n    d3.selectAll(\".clicked\")\n      .attr(\"stroke-width\", \"0\")\n      .classed(\"clicked\", false);\n\n    // Remove timeline\n    //document.getElementById(\"tweet\").innerHTML = \"\";\n\n    // Get the <ul> element with id=\"myList\"\n    var list = document.getElementById(\"theTweet\");\n\n    // If the <ul> element has any child nodes, remove its first child node\n    if (list.hasChildNodes()) {\n      list.removeChild(list.childNodes[0]);\n    }\n\n    document.getElementById(\"theTweet\").innerHTML = \"\";\n\n\n  };\n\n  /**\n   * Handle click on a tweet circle. Display the clicked tweet and let the tweet\n   * appear selected by adding a stroke to it.\n   */\n  const clickCircle = (event, d) => {\n    // Remove results from old click\n    clickView();\n\n    // Add stroke width and set clicked class\n    d3.select(this)\n      .attr(\"stroke-width\", circleClickedStrokeWidth)\n      .classed(\"clicked\", true);\n\n    console.log(d.ScreenName);\n    setTweetId(d.ScreenName);\n  };\n\n  useEffect(() => {\n    const anchor = document.createElement(\"a\");\n    anchor.setAttribute(\"class\", \"twitter-timeline\");\n    anchor.setAttribute(\"data-theme\", \"light\");\n    anchor.setAttribute(\"height\", \"800\");\n    anchor.setAttribute(\"width\", \"500\");\n    anchor.setAttribute(\"data-chrome\", \"noheader nofooter noborders\");\n    anchor.setAttribute(\"href\", `https://twitter.com/${tweetId}`);\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(anchor);\n\n    const script = document.createElement(\"script\");\n    script.setAttribute(\"src\", \"https://platform.twitter.com/widgets.js\");\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(script);\n  }, [tweetId]);\n\n  return (\n    <div className=\"flex justify-center items-center p-20\">\n      <div className=\"shadow-lg bg-gray-100\">\n        <div id=\"tree\">\n          <svg ref={d3Tree}></svg>\n        </div>\n        <div className=\"twitter-embed\" id=\"theTweet\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Tree;\n","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/components/header/Header.js",["41","42"],"import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport { Link } from \"react-router-dom\";\nfunction Header() {\n  return (\n    <div className=\" flex flex-col items-center justify-center w-full mt-5 space-y-16 md:mt-16 md:space-y-28 xl:mt-10 2xl:mt-5\">\n      <div className=\"flex flex-row space-x-5 pt-10 \">\n        <div>\n          <Link to=\"/\" className=\"a\">\n            <button className=\"bg-gray-800 shadow hover:bg-gray-900 text-white font-bold py-5 md:px-8 px-4 rounded\">\n              Graph\n            </button>\n          </Link>\n        </div>\n\n        <div>\n          <Link to=\"/Tree\" className=\"a\">\n            <button className=\"bg-gray-800 shadow hover:bg-gray-900 text-white font-bold py-5 md:px-8 px-4 rounded\">\n              Tree\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/ammaraldhahyani/Desktop/twitter.visual/twitterVisualizations/src/components/Graph2.js",["43","44","45"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport theLinks from \"../data/dummy_links.json\";\nimport theNodes from \"../data/dummy_nodes.json\";\n\nvar circleEnlargeConstant = 2;\nvar circleClickedStrokeWidth = 5;\n\n\nvar link;\nvar node;\nvar margin;\nvar width;\nvar height;\n\nfunction Graph2() {\n  const [links, setLinks] = useState(theLinks);\n  const [nodes, setNodes] = useState(theNodes);\n\n  const [tweetId, setTweetId] = useState(null);\n\n\n  const d3Graph = useRef();\n\n  const drag = (simulation) => {\n    const dragstarted = (event, d) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = (event, d) => {\n      d.fx = event.x;\n      d.fy = event.y;\n    };\n\n    const dragended = (event, d) => {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  };\n\n\n  useEffect(() => {\n    //Specify display sizes\n    margin = { top: 20, right: 30, bottom: 30, left: 30 };\n    width =\n      parseInt(d3.select(\"#graph\").style(\"width\")) - margin.left - margin.right;\n    height =\n      parseInt(d3.select(\"#graph\").style(\"height\")) -\n      margin.top -\n      margin.bottom;\n\n\n    //set up the Graph\n    const svg = d3\n      .select(d3Graph.current)\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n    // Create zoomable area\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n      .attr(\"cursor\", \"grab\")\n      .on(\"click\", clickView);\n\n    // Create simulation\n    var simulation = d3\n      .forceSimulation()\n      //.force(\"link\", d3.forceLink().id(function(d) { return d.id; }))\n      .force(\"charge\", d3.forceManyBody().strength(-5))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    link = g\n      .append(\"g\")\n      .selectAll(\"line\")\n      .attr(\"class\", \"links\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke-width\", (d) => {\n        return Math.sqrt(d.weight / 1000);\n      });\n\n    node = g\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .attr(\"class\", \"nodes\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", (d) => Math.sqrt(d.weight / 100) + 2)\n      .on(\"mouseover\", mouseoverCircle)\n      .on(\"mouseout\", mouseoutCircle)\n      .on(\"click\", clickCircle)\n      .call(drag(simulation));\n\n    ///\n\n    svg.call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([1, 8])\n        .on(\"zoom\", (event, d) => {\n          g.attr(\"transform\", event.transform);\n        })\n    );\n\n    var filteredLinks = links.filter((link) => link.weight >= 1);\n\n    // Link nodes and links to the simulation\n    simulation\n      .nodes(nodes)\n      .on(\"tick\", ticked)\n      .force(\n        \"link\",\n        d3.forceLink(filteredLinks).id(function (d) {\n          return d.id;\n        })\n      );\n\n    // Compute several steps before rendering\n    //loading.remove(); // Remove loading text\n    for (var i = 0, n = 150; i < n; ++i) {\n      simulation.tick();\n    }\n\n    ///\n  }, []);\n\n  // Updates for each simulation tick\n  function ticked() {\n    link\n      .attr(\"x1\", function (d) {\n        return d.source.x;\n      })\n      .attr(\"y1\", function (d) {\n        return d.source.y;\n      })\n      .attr(\"x2\", function (d) {\n        return d.target.x;\n      })\n      .attr(\"y2\", function (d) {\n        return d.target.y;\n      });\n\n    node\n      .attr(\"cx\", function (d) {\n        return d.x;\n      })\n      .attr(\"cy\", function (d) {\n        return d.y;\n      });\n  }\n\n\n  /**\n   * Handle mouse hover on circle. Enlarge circle.\n   */\n  function mouseoverCircle() {\n    // Get circle\n    var circle = d3.select(this);\n\n    // Display activated circle\n    circle.attr(\"r\", circle.attr(\"r\") * circleEnlargeConstant);\n  }\n\n  /**\n   * Handle mouse out on circle. Resize circle.\n   */\n  function mouseoutCircle() {\n    // Get circle\n    var circle = d3.select(this);\n\n    // Display idle circle\n    circle.attr(\"r\", circle.attr(\"r\") / circleEnlargeConstant);\n  }\n\n  /**\n   * Handle click on zoomable area. That is, handle click outside a node which\n   * is considered a deselecting click => deselect previously clicked node\n   * and remove displayed tweets.\n   */\n  function clickView() {\n    // Remove clicked status on clicked nodes\n    d3.selectAll(\".clicked\")\n      .attr(\"stroke-width\", \"0\")\n      .classed(\"clicked\", false);\n\n    // Get the <ul> element with id=\"myList\"\n    var list = document.getElementById(\"theTweet\");\n\n    // If the <ul> element has any child nodes, remove its first child node\n    if (list.hasChildNodes()) {\n      list.removeChild(list.childNodes[0]);\n    }\n\n    document.getElementById(\"theTweet\").innerHTML = \"\";\n\n    // Remove timeline\n    //document.getElementById(\"tweet\").innerHTML = \"\";\n  }\n\n  /**\n   * Handle click on a tweet circle. Display the clicked tweet and let the tweet\n   * appear selected by adding a stroke to it.\n   */\n  function clickCircle(event, d) {\n    // Remove results from old click\n\n    clickView();\n\n    // Add stroke width and set clicked class\n    d3.select(this)\n      .attr(\"stroke-width\", circleClickedStrokeWidth)\n      .classed(\"clicked\", true);\n\n    console.log(d.idNr);\n    setTweetId(d.id);\n    // Display tweet\n\n    //twttr.widgets.createTimeline(\n    //  {\n    //    sourceType: \"profile\",\n    //    userId: d.idNr,\n    //  },\n    //  document.getElementById(\"tweet\"), // Tweet div\n    //\n    //  {\n    //    height: height,\n    //  }\n    //);\n  }\n\n  useEffect(() => {\n    const anchor = document.createElement(\"a\");\n    anchor.setAttribute(\"class\", \"twitter-timeline\");\n    anchor.setAttribute(\"data-theme\", \"dark\");\n    anchor.setAttribute(\"height\", \"800\");\n    anchor.setAttribute(\"width\", \"500\");\n    anchor.setAttribute(\"data-chrome\", \"noheader nofooter noborders\");\n    anchor.setAttribute(\"href\", `https://twitter.com/${tweetId}`);\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(anchor);\n\n    const script = document.createElement(\"script\");\n    script.setAttribute(\"src\", \"https://platform.twitter.com/widgets.js\");\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(script);\n  }, [tweetId]);\n\n  return (\n    <div className=\"flex justify-center items-center p-20\">\n      <div className=\"shadow-lg bg-gray-100\">\n        <div id=\"graph\">\n          <svg ref={d3Graph}></svg>\n        </div>\n\n        <div className=\"twitter-embed\" id=\"theTweet\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graph2;\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":1,"column":13,"nodeType":"52","messageId":"53","endLine":1,"endColumn":15},{"ruleId":"50","severity":1,"message":"54","line":73,"column":9,"nodeType":"52","messageId":"53","endLine":73,"endColumn":14},{"ruleId":"50","severity":1,"message":"55","line":92,"column":9,"nodeType":"52","messageId":"53","endLine":92,"endColumn":19},{"ruleId":"50","severity":1,"message":"56","line":109,"column":9,"nodeType":"52","messageId":"53","endLine":109,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":174,"column":11,"nodeType":"59","messageId":"60","endLine":201,"endColumn":12},{"ruleId":"61","severity":1,"message":"62","line":212,"column":6,"nodeType":"63","endLine":212,"endColumn":8,"suggestions":"64"},{"ruleId":"50","severity":1,"message":"65","line":230,"column":9,"nodeType":"52","messageId":"53","endLine":230,"endColumn":24},{"ruleId":"50","severity":1,"message":"66","line":231,"column":9,"nodeType":"52","messageId":"53","endLine":231,"endColumn":18},{"ruleId":"50","severity":1,"message":"67","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"50","severity":1,"message":"68","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":36},{"ruleId":"50","severity":1,"message":"69","line":17,"column":17,"nodeType":"52","messageId":"53","endLine":17,"endColumn":25},{"ruleId":"50","severity":1,"message":"70","line":18,"column":17,"nodeType":"52","messageId":"53","endLine":18,"endColumn":25},{"ruleId":"61","severity":1,"message":"71","line":140,"column":6,"nodeType":"63","endLine":140,"endColumn":8,"suggestions":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'d3' is defined but never used.","Identifier","unusedVar","'title' is assigned a value but never used.","'xAxisLabel' is assigned a value but never used.","'yAxisLabel' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'clickCircle'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'mouseoverCircle' is assigned a value but never used.","'theCircle' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'setLinks' is assigned a value but never used.","'setNodes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clickCircle', 'links', and 'nodes'. Either include them or remove the dependency array.",["76"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [clickCircle]",{"range":"81","text":"82"},"Update the dependencies array to be: [clickCircle, links, nodes]",{"range":"83","text":"84"},[5217,5219],"[clickCircle]",[3248,3250],"[clickCircle, links, nodes]"]