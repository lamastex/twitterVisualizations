{"version":3,"sources":["componants/Graph.js","componants/Tree.js","helpers/treeHelpers.js","componants/UserTimeline.js","pics/mixn1.png","componants/header/Header.js","componants/Graph2.js","App.js","index.js"],"names":["Graph","radiusScale","colorScale","xScale","yScale","x","d","NrOfRetweets","y","NrOfRetweeters","radius","followersCount","color","id","UserId","getMaxY","data","Math","max","map","getMaxRadius","getMaxColor","maxColor","orderLargestBelow","a","b","userOfInterest","UserID","getCircleId","getTextId","Tree","useState","tweetId","setTweetId","d3Tree","useRef","useEffect","margin","width","parseInt","d3","style","height","svg","current","attr","g","append","text","range","domain","xAxis","ticks","gXAxis","call","yAxis","gYAxis","base","nodes","selectAll","enter","on","event","target","console","log","this","mouseoutCircle","clickCircle","sort","scaleExtent","Infinity","new_xScale","transform","rescaleX","new_yScale","rescaleY","scale","setTextAttributes","exit","remove","ScreenName","name","classed","list","document","getElementById","hasChildNodes","removeChild","childNodes","innerHTML","clickView","anchor","createElement","setAttribute","getElementsByClassName","appendChild","script","className","ref","Header","link","node","setGraphButton","setTreeButton","setTimelineButton","src","mixImg","alt","to","onClick","Graph2","theLinks","links","theNodes","d3Graph","ticked","source","mouseoverCircle","circle","idNr","top","right","bottom","left","simulation","force","strength","sqrt","weight","active","alphaTarget","restart","fx","fy","drag","extent","filteredLinks","filter","i","tick","App","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.52f29cbf.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport theLinks from \"../data/01_links.json\";\nimport theNodes from \"../data/01_nodes.json\";\nimport {\n  draw,\n  createSimulation,\n  zoom,\n  clickView,\n  node,\n} from \"../visualizations/graphVisual\";\n\nvar circleEnlargeConstant = 2;\nvar circleClickedStrokeWidth = 5;\n\nfunction Graph() {\n  const d3Graph = useRef();\n  const svg = d3.select(d3Graph.current);\n\n  var maxRadius = 10;\n\n  //var margin = {\n  //  top: 0.05 * window.innerHeight,\n  //  right: 0.15 * window.innerHeight,\n  //  bottom: 0.1 * window.innerHeight,\n  //  left: 0.15 * window.innerHeight,\n  //};\n  //var width = window.innerWidth - margin.left - margin.right;\n  //var height = window.innerHeight - margin.top - margin.bottom;\n\n  const [links, setLinks] = useState(theLinks);\n  const [nodes, setNodes] = useState(theNodes);\n\n  useEffect(() => {\n    const margin = { top: 50, right: 30, bottom: 30, left: 30 };\n    const width =\n      parseInt(d3.select(\"#graph\").style(\"width\")) - margin.left - margin.right;\n    const height =\n      parseInt(d3.select(\"#graph\").style(\"height\")) -\n      margin.top -\n      margin.bottom;\n\n    const simulation = createSimulation(nodes, links, width, height);\n    d3.selectAll(\"svg > *\").remove();\n    d3.select(d3Graph.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n      .call((svg) => draw(svg, simulation, { nodes, links }));\n    //.call((svg) => zoom(svg));\n    // Create zoomable area\n    var zoomView = svg\n      .append(\"rect\")\n      .attr(\"class\", \"zoom\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .on(\"click\", clickView)\n      .call(zoom);\n  }, [links, nodes]);\n\n  useEffect(() => {\n    /* Handle mouse hover on circle. Enlarge circle.\n     */\n    const mouseoverCircle = () => {\n      // Get circle\n      var circle = d3.select(this);\n\n      //// Display activated circle\n      circle.attr(\"r\", circle.attr(\"r\") * circleEnlargeConstant);\n    };\n\n    /**\n     * Handle mouse out on circle. Resize circle.\n     */\n    const mouseoutCircle = () => {\n      // Get circle\n      var circle = d3.select(this);\n      //\n      //// Display idle circle\n      circle.attr(\"r\", circle.attr(\"r\") / circleEnlargeConstant);\n    };\n\n    node.on(\"mouseover\", mouseoverCircle).on(\"mouseout\", mouseoutCircle);\n  }, [node]);\n\n  return (\n    <div className=\"flex justify-center items-center p-20\">\n      <div className=\"shadow-lg bg-gray-100\">\n        <div id=\"graph\">\n          <svg ref={d3Graph}></svg>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graph;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../data/01_tree.json\";\n//import { draw, zoom } from \"../visualizations/treeVisual\";\n\nimport {\n  getMaxX,\n  getMaxY,\n  getMaxRadius,\n  getMaxColor,\n  orderLargestBelow,\n  x,\n  y,\n  radius,\n  color,\n  name,\n  id,\n} from \"../helpers/treeHelpers\";\n\n/*\nSpecify circle constants\n*/\nvar circleMaxRadius = 8;\nvar circleMinRadius = 3;\nvar circleEnlargeConstant = 2;\nvar circleIdleOpacity = 0.2;\nvar circleActiveOpacity = 1;\nvar circleClickedStrokeWidth = 4;\n\n/*\nCreate our user of interest\n*/\nvar userOfInterest = {\n  UserID: \"123456789\", // Add the user of interest if wanted\n};\n\n/*\nCreate id-functions\n*/\nconst getCircleId = (d) => \"circ\" + id(d);\nconst getTextId = (d) => \"text\" + id(d);\n\n//\nvar radiusScale;\nvar colorScale;\n\n//\nvar xScale;\nvar yScale;\n\nfunction Tree() {\n  const [tweetId, setTweetId] = useState(null);\n  const d3Tree = useRef();\n\n  useEffect(() => {\n    const margin = { top: 50, right: 30, bottom: 30, left: 30 };\n    const width =\n      parseInt(d3.select(\"#tree\").style(\"width\")) - margin.left - margin.right;\n    const height =\n      parseInt(d3.select(\"#tree\").style(\"height\")) - margin.top - margin.bottom;\n    //d3.selectAll(\"svg > *\").remove();\n    const svg = d3\n      .select(d3Tree.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    /*\nCreate title\n*/\n    var title = g\n      .append(\"text\")\n      .attr(\"class\", \"title\") // style in css\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 0)\n      .text(\"Twitter network in 01_tree.json\");\n\n    xScale = d3\n      .scaleLog()\n      .range([0, width])\n      .domain([1, getMaxX(data)]);\n    var xAxis = d3.axisBottom(xScale).ticks(5, d3.format(\",d\"));\n    var gXAxis = g\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(\" + 0 + \",\" + height + \")\")\n      .call(xAxis);\n\n    // Create x-axis label.\n    var xAxisLabel = g\n      .append(\"text\")\n      .attr(\"class\", \"x label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", width)\n      .attr(\"y\", height - 6)\n      .text(\"Number of retweets\");\n    //\n\n    yScale = d3\n      .scaleLinear()\n      .range([height, 0])\n      .domain([0, getMaxY(data)]);\n    var yAxis = d3.axisLeft(yScale);\n    var gYAxis = g.append(\"g\").attr(\"class\", \"y axis\").call(yAxis);\n\n    // Create y-axis label\n    var yAxisLabel = g\n      .append(\"text\")\n      .attr(\"class\", \"y label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".75em\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"Number of unique retweeters\");\n\n    /*\n  Create scale for radius\n  */\n    radiusScale = d3\n      .scaleLog()\n      .base(10)\n      .range([circleMinRadius, circleMaxRadius])\n      .domain([1, getMaxRadius(data)]);\n\n    /*\n  Create scale for color\n  */\n    colorScale = d3\n      .scaleLinear()\n      .range([\"blue\", \"red\"])\n      .domain([1, getMaxColor(data)]);\n\n    // Enter the data\n    var nodes = g\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cursor\", \"grab\")\n      .attr(\"class\", \"nodeCircle\")\n      .attr(\"data-id\", id)\n      .attr(\"id\", getCircleId)\n      .attr(\"opacity\", circleIdleOpacity)\n      .attr(\"fill\", (d) => colorScale(color(d)))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0)\n      .attr(\"r\", (d) => radiusScale(radius(d)))\n      .attr(\"cx\", (d) => xScale(x(d)))\n      .attr(\"cy\", (d) => yScale(y(d)))\n      .on(\"mouseover\", function (event, d) {\n        d3.select(event.target)\n          .attr(\"r\", 10 * circleEnlargeConstant)\n          .attr(\"opacity\", circleActiveOpacity);\n\n        console.log(d);\n        console.log(event.target);\n        console.log(this);\n\n        // Set text class to visible\n        //g\n        //  .select(\"#text\", theCircle.attr(\"data-id\"))\n        //  .classed(\"hidden\", false)\n        //  .classed(\"visible\", true);\n      })\n      .on(\"mouseout\", mouseoutCircle)\n      .on(\"click\", clickCircle)\n      .sort(orderLargestBelow);\n\n    svg.call(\n      d3\n        .zoom()\n\n        .scaleExtent([0.5, Infinity])\n        .on(\"zoom\", (event, d) => {\n          {\n            // Create new x- and y-scale\n            var new_xScale = event.transform.rescaleX(xScale);\n            var new_yScale = event.transform.rescaleY(yScale);\n\n            // Display new axes\n            gXAxis.call(xAxis.scale(new_xScale));\n            gYAxis.call(yAxis.scale(new_yScale));\n\n            // Reposition circles\n            d3.selectAll(\".nodeCircle\")\n              .attr(\"cx\", function (d) {\n                return new_xScale(x(d));\n              })\n              .attr(\"cy\", function (d) {\n                return new_yScale(y(d));\n              });\n            // To force constant circle radius on zoom:\n            //.attr(\"r\", function(d) { return d3.event.transform.scale(radiusScale(radius(d))).k; })\n\n            // Reposition texts\n            d3.selectAll(\".nodeText\")\n              .attr(\"x\", function (d) {\n                return new_xScale(x(d));\n              })\n              .attr(\"y\", function (d) {\n                return new_yScale(y(d));\n              });\n          }\n        })\n    );\n\n    // Create tooltip that shows username\n    nodes.append(\"text\").call(setTextAttributes);\n\n    // Set appearance for user of interest\n    d3.select(\"#\" + getCircleId(userOfInterest)).attr(\"fill\", \"orange\");\n\n    g.exit().remove();\n  }, []);\n\n  //Set attributes for circles (Twitter account nodes).\n  //const setCircleAttributes = (circle) => {\n  //  circle\n  //    .attr(\"class\", \"nodeCircle\")\n  //    .attr(\"data-id\", id)\n  //    .attr(\"id\", getCircleId)\n  //    .attr(\"opacity\", circleIdleOpacity)\n  //    .attr(\"fill\", (d) => colorScale(color(d)))\n  //    .attr(\"stroke\", \"black\")\n  //    .attr(\"stroke-width\", 0)\n  //    .attr(\"r\", (d) => radiusScale(radius(d)))\n  //    .attr(\"cx\", (d) => xScale(x(d)))\n  //    .attr(\"cy\", (d) => yScale(y(d)));\n  //};\n\n  //Set attributes for tooltip (showing screen name) text.\n  const setTextAttributes = (text) => {\n    text\n      .attr(\"class\", \"hidden nodeText\") // Set class to hidden upon creation\n      .attr(\"data-id\", id)\n      .attr(\"id\", getTextId)\n      .attr(\"x\", (d) => xScale(x(d)))\n      .attr(\"y\", (d) => yScale(y(d)))\n      .attr(\"dy\", (d) => -(circleMaxRadius * circleEnlargeConstant * 1.5))\n      .attr(\"text-anchor\", \"beginning\")\n      .text((d) => name(d));\n  };\n\n  //Handle mouse hover on circle. Display circle's screen name.\n  const mouseoverCircle = (event, d) => {\n    var theCircle = d3\n      .select(this)\n      .attr(\"fill\", \"orange\")\n      .attr(\"r\", 10 * circleEnlargeConstant);\n    // Get circle\n    //var circle = d3.select(this);\n\n    // Display activated circle\n    //circle.attr(\"r\", circle.attr(\"r\") * circleEnlargeConstant);\n    //circle.attr(\"opacity\", circleActiveOpacity);\n\n    // Set text class to visible\n    //g\n    //  .select(\"#text\", theCircle.attr(\"data-id\"))\n    //  .classed(\"hidden\", false)\n    //  .classed(\"visible\", true);\n  };\n\n  //Handle zoom. Zoom both x-axis and y-axis.\n\n  function mouseoutCircle(event, d) {\n    d3.select(event.target)\n      .attr(\"r\", 10 / circleEnlargeConstant)\n      .attr(\"opacity\", circleActiveOpacity);\n    // Get circle\n    //var circle = d3.select(this);\n\n    // Display idle circle\n    //circle.attr(\"r\", circle.attr(\"r\") / circleEnlargeConstant);\n    //circle.attr(\"opacity\", circleIdleOpacity);\n\n    // Set text class to hidden\n    //g\n    //  .select(\"#text\" + circle.attr(\"data-id\"))\n    //  .classed(\"visible\", false)\n    //  .classed(\"hidden\", true);\n  }\n\n  /**\n   * Handle click on zoomable area. That is, handle click outside a node which\n   * is considered a deselecting click => deselect previously clicked node\n   * and remove displayed tweets.\n   */\n  const clickView = () => {\n    // Remove clicked status on clicked nodes\n    d3.selectAll(\".clicked\")\n      .attr(\"stroke-width\", \"0\")\n      .classed(\"clicked\", false);\n\n    // Remove timeline\n    //document.getElementById(\"tweet\").innerHTML = \"\";\n\n    // Get the <ul> element with id=\"myList\"\n    var list = document.getElementById(\"theTweet\");\n\n    // If the <ul> element has any child nodes, remove its first child node\n    if (list.hasChildNodes()) {\n      list.removeChild(list.childNodes[0]);\n    }\n\n    document.getElementById(\"theTweet\").innerHTML = \"\";\n\n    // Remove timeline\n    //document.getElementById(\"tweet\").innerHTML = \"\";\n  };\n\n  /**\n   * Handle click on a tweet circle. Display the clicked tweet and let the tweet\n   * appear selected by adding a stroke to it.\n   */\n  const clickCircle = (event, d) => {\n    // Remove results from old click\n    clickView();\n\n    // Add stroke width and set clicked class\n    d3.select(this)\n      .attr(\"stroke-width\", circleClickedStrokeWidth)\n      .classed(\"clicked\", true);\n\n    console.log(d.ScreenName);\n    setTweetId(d.ScreenName);\n  };\n\n  useEffect(() => {\n    const anchor = document.createElement(\"a\");\n    anchor.setAttribute(\"class\", \"twitter-timeline\");\n    anchor.setAttribute(\"data-theme\", \"light\");\n    anchor.setAttribute(\"height\", \"800\");\n    anchor.setAttribute(\"width\", \"500\");\n    anchor.setAttribute(\"data-chrome\", \"noheader nofooter noborders\");\n    anchor.setAttribute(\"href\", `https://twitter.com/${tweetId}`);\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(anchor);\n\n    const script = document.createElement(\"script\");\n    script.setAttribute(\"src\", \"https://platform.twitter.com/widgets.js\");\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(script);\n  }, [tweetId]);\n\n  return (\n    <div className=\"flex justify-center items-center p-20\">\n      <div className=\"shadow-lg bg-gray-100\">\n        <div id=\"tree\">\n          <svg ref={d3Tree}></svg>\n        </div>\n        <div className=\"twitter-embed\" id=\"theTweet\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Tree;\n","import * as d3 from 'd3'\n\nvar circleEnlargeConstant = 2;\nvar circleIdleOpacity = 0.2;\nvar circleActiveOpacity = 1;\nvar circleClickedStrokeWidth = 4;\n\n/*\nCreate accessors that specify data from the csv-file\n*/\nexport const x = (d) => d.NrOfRetweets;\nexport const y = (d) => d.NrOfRetweeters;\nexport const radius = (d) => d.followersCount;\nexport const color = (d) => d.followersCount;\nexport const name = (d) => d.ScreenName;\nexport const id = (d) => d.UserId;\n\n// Returns the largest x-value in the data.\nexport const getMaxX = (data) => Math.max(...data.map((d) => x(d)));\n\n//Returns the largest y-value in the data.\nexport const getMaxY = (data) => Math.max(...data.map((d) => y(d)));\n\n//Returns the largest radius in the data.\nexport const getMaxRadius = (data) => Math.max(...data.map((d) => radius(d)));\n\n//Returns the \"largest\" color in the data.\nexport const getMaxColor = (data) => {\n  var maxColor = Math.max(...data.map((d) => color(d)));\n  var cutOff = 10000;\n\n  if (maxColor > cutOff) return cutOff;\n  return maxColor;\n};\n\n\n//Order so that largest circle gets placed deepest.\nexport const orderLargestBelow = (a, b) => radius(b) - radius(a)\n\n","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport data from \"../data/01_userTimeline.json\";\n//import { draw, xScale, xAxis, gXAxis } from \"../visualizations/timelineVisual\";\n\n// Set various tweet radius\nvar idleTweetRadius = 15;\nvar activeTweetRadius = idleTweetRadius * 1.618;\nvar highlightedActiveTweetRadius = activeTweetRadius * 1.618;\n\nvar xScale;\nvar xAxis;\nvar gXAxis;\n\nfunction UserTimeline() {\n  const d3Timeline = useRef();\n\n  const zoomed = (event, d) => {\n    // Create new x-scale based on zoom\n    var new_xScale = event.transform.rescaleX(xScale);\n\n    // Display new x-scale. .ticks(3) to prettify\n    gXAxis.call(xAxis.ticks(5).scale(new_xScale));\n\n    // Reposition tweets based on zoom\n    var tweets = d3.selectAll(\".tweet\");\n    tweets.attr(\"cx\", function (d) {\n      return new_xScale(new Date(d.CurrentTweetDate));\n    });\n  };\n\n  useEffect(() => {\n    const margin = { top: 50, right: 30, bottom: 30, left: 30 };\n    const width =\n      parseInt(d3.select(\"#timeline\").style(\"width\")) -\n      margin.left -\n      margin.right;\n    const height =\n      parseInt(d3.select(\"#timeline\").style(\"height\")) -\n      margin.top -\n      margin.bottom;\n    //d3.selectAll(\"svg > *\").remove();\n    const svg = d3\n      .select(d3Timeline.current)\n      .style(\"z-index\", \"-1\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom);\n\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    //.call((svg) => draw(svg, data, width, height));\n\n    // Create zoom object. Zooms x-axis.\n    var zoom = d3.zoom().on(\"zoom\", zoomed);\n\n    // Create zoomable area. Basically just an overlaid rectangle.\n    var view = g\n      .append(\"rect\")\n      .attr(\"class\", \"zoom\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      // Allow for zoom while hovering x-axis\n      .attr(\"transform\", \"translate(\" + 0 + \",\" + margin.top + \")\")\n      // Remove currently displayed tweet on click\n      .on(\"click\", function () {\n        clickView();\n      })\n      // Link to zoom\n      .call(zoom);\n\n    // Create x-scale and set x-range.\n    xScale = d3.scaleTime().range([0, width]);\n\n    // Create xAxis.\n    xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat(\"%c\")); // Set tick format date and time\n\n    // Display x-axis.\n    gXAxis = g\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(\" + 0 + \",\" + height + \")\");\n\n    // Create x-axis label.\n    g.append(\"text\")\n      .attr(\"class\", \"x label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", width)\n      .attr(\"y\", height - 6)\n      .text(\"Time of Tweet\");\n\n    // y-range. Sets data placement along y-axis.\n    // y-axis is divided in 6 lines, including top/bottom of chart,\n    // and data is placed in the middle, lines 2 to 5.\n    var yRange = [2, 3, 4, 5].map(function (x) {\n      return (x * height) / 6;\n    });\n\n    // y-domain. Specifies which data should be placed where along y-axis.\n    // Important: Matches with data from file.\n    var yDomain = [\"ReplyTweet\", \"QuotedTweet\", \"ReTweet\", \"OriginalTweet\"];\n\n    // y-ticks to be displayed.\n    var yTickValues = [\"Reply\", \"Quote\", \"Retweet\", \"Tweet\"];\n\n    // Create the y-scale and set y-range\n    var yScale = d3.scaleOrdinal().range(yRange).domain(yDomain);\n\n    // Create y-axis.\n    var yAxis = d3.axisLeft(yScale).tickValues(yTickValues);\n\n    // Display y-axis.\n    var gYAxis = g\n      .append(\"g\")\n      .attr(\"class\", \"y axis\") // Set class to y and axis\n      .call(yAxis);\n\n    // Create y-axis label.\n    g.append(\"text\")\n      .attr(\"class\", \"y label\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"x\", (-2 * height) / 6)\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".75em\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .text(\"Type of Tweet\");\n\n    // display x-axis\n    xAxis.ticks(5);\n    gXAxis.call(xAxis);\n\n    // Create and display the x-axis\n    createAndDisplayXAxis(data, xScale);\n\n    // Create circle for each tweet\n    g.append(\"g\")\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"id\", (d) => getGID(d.CurrentTwID))\n      //.append(\"circle\")\n      // Set class to tweet ID\n      .attr(\"id\", (d) => getTweetID(d.CurrentTwID))\n      // Set position\n      .attr(\"cy\", (d) => yScale(d.TweetType.replace(/\\s/g, \"\")))\n      .attr(\"cx\", (d) =>\n        // x-position by tweet date\n        xScale(new Date(d.CurrentTweetDate))\n      )\n      // Set circle radius\n      .attr(\"r\", idleTweetRadius)\n      // Set stroke width to 0\n      .attr(\"stroke-width\", \"0\")\n      // Set color by tweet type\n      .attr(\n        \"class\",\n        (d) =>\n          // remove whitespace and return TweetType\n          \"tweet \" + d.TweetType.replace(/\\s/g, \"\")\n      )\n      .attr(\"fill\", \"blue\")\n      // Add tooltip and enlarge tweet on mouse hover\n      .on(\"mouseover\", mouseoverTweet)\n      // Restore tweet on mouseout\n      .on(\"mouseout\", mouseoutTweet)\n      // Show actual tweet on click\n      .on(\"click\", clickTweet);\n  }, [data]);\n\n  return (\n    <div className=\"flex justify-center items-center p-20\">\n      <div className=\"\">\n        <div id=\"timeline\">\n          <svg ref={d3Timeline}></svg>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserTimeline;\n\nconst createAndDisplayXAxis = (data, xScale) => {\n  // Get oldest date (that is, date of first tweet in the data)\n  var oldestDate = new Date(data[data.length - 1].CurrentTweetDate);\n  // Get newest date (that is, date of latest tweet in the data)\n  var newestDate = new Date(data[0].CurrentTweetDate);\n  // Add 2 weeks at beginning and end of axis for prettier display\n  oldestDate.setDate(oldestDate.getDate() - 14); // go back 14 days\n  newestDate.setDate(newestDate.getDate() + 14); // go forward 14 days\n\n  // Set x-scale domain from newest and oldest date\n  xScale.domain([oldestDate, newestDate]);\n};\n\n/**\n * Handle mouse hover on circle. Enlarge circle.\n */\nfunction mouseoverTweet() {\n  // Get circle\n  var circle = d3.select(this);\n\n  // Display activated circle\n  circle.attr(\"r\", circle.attr(\"r\") * 5);\n}\n\n/**\n * Handle mouse out on circle. Resize circle.\n */\nfunction mouseoutTweet() {\n  // Get circle\n  var circle = d3.select(this);\n\n  // Display idle circle\n  circle.attr(\"r\", activeTweetRadius);\n}\n\n/**\n * Handle click on zoomable area. That is, handle click outside a tweet which\n * is considered a deselecting click. So, deselect previously clicked tweets\n * and remove displayed tweets.\n */\nfunction clickView() {\n  // Get all clicked tweets\n  var clicked = d3.selectAll(\".clicked\");\n\n  // Remove clicked status on clicked tweets\n  clicked.attr(\"stroke-width\", \"0\");\n  clicked.classed(\"clicked\", false);\n\n  // Remove tweet\n  document.getElementById(\"tweet\").innerHTML = \"\";\n}\n\n/**\n * Handle click on a tweet circle. Display the clicked tweet and let the tweet\n * appear selected by adding a stroke to it.\n */\nfunction clickTweet(d) {\n  // Remove results from old click\n  clickView();\n\n  // Get tweet\n  var tweet = d3.select(this);\n\n  // Set tweet to clicked\n  tweet.classed(\"clicked\", true);\n\n  // Get tweet div\n  // Cannot do d3.select because twttr doesn't handle D3 selections\n  var tweetDiv = document.getElementById(\"tweet\");\n}\n\n/**\n * Creates a tweet ID from a raw data tweet ID.\n *\n * @param {string} id - The tweet ID.\n */\nexport const getTweetID = (currentTwID) => \"tw\" + currentTwID;\n\nexport const getGID = (currentTwID) => \"g\" + currentTwID;\n","export default __webpack_public_path__ + \"static/media/mixn1.7eb88c25.png\";","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\"\nimport { Link } from \"react-router-dom\";\nimport mixImg from \"../../pics/mixn1.png\";\nfunction Header() {\n  const [graphButton, setGraphButton] = useState(\"default\");\n  const [treeButton, setTreeButton] = useState(\"default\");\n  const [timelineButton, setTimelineButton] = useState(\"default\");\n\n  const graphClicked = () => {\n    setGraphButton(\"primary\");\n    setTimelineButton(\"default\");\n    setTreeButton(\"default\");\n  };\n\n  const treeClicked = () => {\n    setGraphButton(\"default\");\n    setTimelineButton(\"default\");\n    setTreeButton(\"primary\");\n  };\n\n  const timelineClicked = () => {\n    setGraphButton(\"default\");\n    setTimelineButton(\"primary\");\n    setTreeButton(\"default\");\n  };\n\n  return (\n    <div className=\" flex flex-col items-center justify-center w-full mt-5 space-y-16 md:mt-16 md:space-y-28 xl:mt-10 2xl:mt-5\">\n      <div className=\"px-10 md:px-0\">\n        <img\n          className=\"object-scale-down h-xs md:h-sm xl:h-md 2xl:h-lg \"\n          src={mixImg}\n          alt=\"\"\n        ></img>\n      </div>\n      <div className=\"flex flex-row space-x-5 \">\n        <div>\n          <Link to=\"/\" className=\"a\">\n            <button\n              onClick={graphClicked}\n              className=\"bg-gray-800 shadow hover:bg-gray-900 text-white font-bold py-5 md:px-8 px-4 rounded\"\n            >\n              Graph\n            </button>\n          </Link>\n        </div>\n\n        <div>\n          <Link to=\"/Tree\" className=\"a\">\n            <button\n              onClick={treeClicked}\n              className=\"bg-gray-800 shadow hover:bg-gray-900 text-white font-bold py-5 md:px-8 px-4 rounded\"\n            >\n              Tree\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport theLinks from \"../data/01_links.json\";\nimport theNodes from \"../data/01_nodes.json\";\n\nvar circleEnlargeConstant = 2;\nvar circleClickedStrokeWidth = 5;\nvar maxRadius = 10;\n\n//var margin = {\n//  top: 0.05 * window.innerHeight,\n//  right: 0.15 * window.innerHeight,\n//  bottom: 0.1 * window.innerHeight,\n//  left: 0.15 * window.innerHeight,\n//};\n//var width = window.innerWidth - margin.left - margin.right;\n//var height = window.innerHeight - margin.top - margin.bottom;\n\nvar link;\nvar node;\nvar margin;\nvar width;\nvar height;\n\nfunction Graph2() {\n  const [links, setLinks] = useState(theLinks);\n  const [nodes, setNodes] = useState(theNodes);\n\n  const [tweetId, setTweetId] = useState(null);\n\n  //const [twittrWidget, setTwittrWidget] = useState(0);\n\n  const d3Graph = useRef();\n\n  const drag = (simulation) => {\n    const dragstarted = (event, d) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    };\n\n    const dragged = (event, d) => {\n      d.fx = event.x;\n      d.fy = event.y;\n    };\n\n    const dragended = (event, d) => {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    };\n\n    return d3\n      .drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  };\n\n  /**\n   * Handle zoom. Zoom both x-axis and y-axis.\n   */\n  //const zoomed = (transform) => {\n  //  g.attr(\"transform\", transform);\n  //};\n\n  useEffect(() => {\n    //Specify display sizes\n    margin = { top: 20, right: 30, bottom: 30, left: 30 };\n    width =\n      parseInt(d3.select(\"#graph\").style(\"width\")) - margin.left - margin.right;\n    height =\n      parseInt(d3.select(\"#graph\").style(\"height\")) -\n      margin.top -\n      margin.bottom;\n    //width = 800;\n    //height = 800;\n\n    //set up the Graph\n    const svg = d3\n      .select(d3Graph.current)\n      .attr(\"viewBox\", [0, 0, width, height]);\n\n    // Create zoomable area\n    const g = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n      .attr(\"cursor\", \"grab\")\n      .on(\"click\", clickView);\n\n    // Create simulation\n    var simulation = d3\n      .forceSimulation()\n      //.force(\"link\", d3.forceLink().id(function(d) { return d.id; }))\n      .force(\"charge\", d3.forceManyBody().strength(-5))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n    link = g\n      .append(\"g\")\n      .selectAll(\"line\")\n      .attr(\"class\", \"links\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke-width\", (d) => {\n        return Math.sqrt(d.weight / 1000);\n      });\n\n    node = g\n      .append(\"g\")\n      .selectAll(\"circle\")\n      .attr(\"class\", \"nodes\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", (d) => Math.sqrt(d.weight / 100) + 2)\n      .on(\"mouseover\", mouseoverCircle)\n      .on(\"mouseout\", mouseoutCircle)\n      .on(\"click\", clickCircle)\n      .call(drag(simulation));\n\n    ///\n\n    svg.call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([1, 8])\n        .on(\"zoom\", (event, d) => {\n          g.attr(\"transform\", event.transform);\n        })\n    );\n\n    var filteredLinks = links.filter((link) => link.weight >= 1);\n\n    // Link nodes and links to the simulation\n    simulation\n      .nodes(nodes)\n      .on(\"tick\", ticked)\n      .force(\n        \"link\",\n        d3.forceLink(filteredLinks).id(function (d) {\n          return d.id;\n        })\n      );\n\n    // Compute several steps before rendering\n    //loading.remove(); // Remove loading text\n    for (var i = 0, n = 150; i < n; ++i) {\n      simulation.tick();\n    }\n\n    ///\n  }, []);\n\n  // Updates for each simulation tick\n  function ticked() {\n    link\n      .attr(\"x1\", function (d) {\n        return d.source.x;\n      })\n      .attr(\"y1\", function (d) {\n        return d.source.y;\n      })\n      .attr(\"x2\", function (d) {\n        return d.target.x;\n      })\n      .attr(\"y2\", function (d) {\n        return d.target.y;\n      });\n\n    node\n      .attr(\"cx\", function (d) {\n        return d.x;\n      })\n      .attr(\"cy\", function (d) {\n        return d.y;\n      });\n  }\n\n  //const svg = d3.select(d3Graph.current);\n  // Create loading text\n  //var loading = svg\n  //  .append(\"text\")\n  //  .attr(\"y\", height / 2)\n  //  .attr(\"x\", width / 2)\n  //  .attr(\"text-anchor\", \"middle\")\n  //  .text(\"Loading graph... \\n Takes a couple of seconds\");\n\n  /**\n   * Handle mouse hover on circle. Enlarge circle.\n   */\n  function mouseoverCircle() {\n    // Get circle\n    var circle = d3.select(this);\n\n    // Display activated circle\n    circle.attr(\"r\", circle.attr(\"r\") * circleEnlargeConstant);\n  }\n\n  /**\n   * Handle mouse out on circle. Resize circle.\n   */\n  function mouseoutCircle() {\n    // Get circle\n    var circle = d3.select(this);\n\n    // Display idle circle\n    circle.attr(\"r\", circle.attr(\"r\") / circleEnlargeConstant);\n  }\n\n  /**\n   * Handle click on zoomable area. That is, handle click outside a node which\n   * is considered a deselecting click => deselect previously clicked node\n   * and remove displayed tweets.\n   */\n  function clickView() {\n    // Remove clicked status on clicked nodes\n    d3.selectAll(\".clicked\")\n      .attr(\"stroke-width\", \"0\")\n      .classed(\"clicked\", false);\n\n    // Get the <ul> element with id=\"myList\"\n    var list = document.getElementById(\"theTweet\");\n\n    // If the <ul> element has any child nodes, remove its first child node\n    if (list.hasChildNodes()) {\n      list.removeChild(list.childNodes[0]);\n    }\n\n    document.getElementById(\"theTweet\").innerHTML = \"\";\n\n    // Remove timeline\n    //document.getElementById(\"tweet\").innerHTML = \"\";\n  }\n\n  /**\n   * Handle click on a tweet circle. Display the clicked tweet and let the tweet\n   * appear selected by adding a stroke to it.\n   */\n  function clickCircle(event, d) {\n    // Remove results from old click\n\n    clickView();\n\n    // Add stroke width and set clicked class\n    d3.select(this)\n      .attr(\"stroke-width\", circleClickedStrokeWidth)\n      .classed(\"clicked\", true);\n\n    console.log(d.idNr);\n    setTweetId(d.id);\n    // Display tweet\n\n    //twttr.widgets.createTimeline(\n    //  {\n    //    sourceType: \"profile\",\n    //    userId: d.idNr,\n    //  },\n    //  document.getElementById(\"tweet\"), // Tweet div\n    //\n    //  {\n    //    height: height,\n    //  }\n    //);\n  }\n\n  useEffect(() => {\n    const anchor = document.createElement(\"a\");\n    anchor.setAttribute(\"class\", \"twitter-timeline\");\n    anchor.setAttribute(\"data-theme\", \"dark\");\n    anchor.setAttribute(\"height\", \"800\");\n    anchor.setAttribute(\"width\", \"500\");\n    anchor.setAttribute(\"data-chrome\", \"noheader nofooter noborders\");\n    anchor.setAttribute(\"href\", `https://twitter.com/${tweetId}`);\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(anchor);\n\n    const script = document.createElement(\"script\");\n    script.setAttribute(\"src\", \"https://platform.twitter.com/widgets.js\");\n    document.getElementsByClassName(\"twitter-embed\")[0].appendChild(script);\n  }, [tweetId]);\n\n  return (\n    <div className=\"flex justify-center items-center p-20\">\n      <div className=\"shadow-lg bg-gray-100\">\n        <div id=\"graph\">\n          <svg ref={d3Graph}></svg>\n        </div>\n\n        <div className=\"twitter-embed\" id=\"theTweet\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graph2;\n","import \"./App.css\";\nimport Graph from \"./componants/Graph\";\nimport Tree from \"./componants/Tree\";\nimport UserTimeline from \"./componants/UserTimeline\";\nimport Header from \"./componants/header/Header\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Graph2 from \"./componants/Graph2\";\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-70 min-w-screen\">\n      <div className=\"bg-gray-70 w-full h-full\">\n        <div className=\"flex flex-col space-y-5 md:space-y-32 \">\n          <Router>\n            <Header />\n            <Switch>\n              <Route exact path=\"/\">\n                <Graph2 />\n              </Route>\n              <Route path=\"/Tree\">\n                <Tree />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}